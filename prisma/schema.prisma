// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole      @default(USER)
  assignedIssues Issue[]
  activities     UserActivity[] // 用户的活动  
}

model App {
  id          Int             @id @default(autoincrement())
  name        String          
  title       String
  url         String
  description String
  createdAt   DateTime        @default(now())
  appTags     AppTag[]
  image       String          @db.VarChar(255)
  icon        String          @db.VarChar(255)
  appPlatforms   AppPlatform[] 
  userActivities  UserActivity[]  // 用户对这个应用的所有活动
  approved Boolean @default(false)
 
}

model UserActivity {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  app    App    @relation(fields: [appId], references: [id])
  appId  Int

  activityType   ActivityType // 活动类型（点赞、收藏、浏览历史）

  @@id([userId, appId, activityType])
}

// 活动类型枚举
enum ActivityType {
  LIKE
  BOOKMARK
  HISTORY
}




model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  appTag    AppTag[]
  hotScore  Int
}
model AppTag {
  id    Int @id @default(autoincrement())
  appId Int // 帖子ID
  tagId Int // 标签ID
  app   App @relation(fields: [appId], references: [id])
  tag   Tag @relation(fields: [tagId], references: [id])

  @@unique([appId, tagId])
}



model Platform {
  id   Int           @id @default(autoincrement())
  name PlatformType          @unique
  apps AppPlatform[] // 表示 Platform 和 App 的多对多关系
}


enum PlatformType {
  Website
  API
  GPT
  IOS
  Android
  Windows
  MAC
  Linux
  ChromeExtension
	
}

model AppPlatform {
  id         Int      @id @default(autoincrement())
  app        App      @relation(fields: [appId], references: [id])
  platform   Platform @relation(fields: [platformId], references: [id])
  appId      Int
  platformId Int
}



enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id    Int    @id @default(autoincrement())
  name  String
  price Float
}

model Image {
  id          Int      @id @default(autoincrement())
  issue       Int
  title       String
  url         String
  tags        String[]
  width       Int
  height      Int
  description String
}

model Issue {
  id               Int         @id @default(autoincrement())
  title            String      @db.VarChar(255)
  description      String      @db.Text
  status           IssueStatus @default(OPEN)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  assignedToUserId String?     @db.VarChar(255)
  assignedToUser   User?       @relation(fields: [assignedToUserId], references: [id])
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSE
}
